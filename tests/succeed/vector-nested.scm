;; (define vecA #"Hello World Vectors")
;; (print vecA)
;; (print (u8vector-length vecA))
;; (let ([bigvec (#%make-u8vector 1280 0)])
;;   (print bigvec))
;; 
;; (let ([bigvec (#%make-u8vector 6 0)])
;;   ; little-endian pair (bigvec . #f)
;;   (u8vector-set! bigvec 0 #x00)
;;   (u8vector-set! bigvec 1 #x85)
;;   (u8vector-set! bigvec 2 #x00)
;;   (u8vector-set! bigvec 3 #x86)
;;   (print bigvec)
;;   (let ([pair (cons bigvec #f)]
;;         [pair2 (cons #f #f)])
;;     (print pair)
;;     (print bigvec)))
;; 
;; (putchar #x0a)

(define vecB (#%make-vector 13 #"HWV"))
(print vecB)
(vector-set! vecB 3 (cons #t #f))
(print vecB)
(vector-set! vecB 4 (#%make-vector 9 6))
(print vecB)
(vector-set! vecB 5 "hello world")
(print vecB)
(putchar #x0a)