(define A 'hello)
(define C 'potato)
((lambda (B D)
 (print A)
 (print B)
 (print C)
 (displayln D)
 (displayln "ABCDabcdHello Potato")
 (print (eq? A C))
 (print (eq? A (string->symbol "hello")))
 (print (eq? A (string->symbol "catapult")))
 (print (eq? C (string->symbol "toothpaste")))
 (print (eq? C (string->symbol "potato")))
 (print (eq? B (string->symbol "cheeseburger")))
 (print (eq? D (string->symbol "doorknob")))
 (print (eq? D (string->symbol "equalizer")))
 (print (eq? D (string->symbol "smithy")))
 (print (eq? D (string->symbol "vignette")))) 'cheeseburger 'doorknob)